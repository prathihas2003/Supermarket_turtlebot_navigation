#Create a Control Script
mkdir scripts
touch scripts/turtlebot_navigator.py
chmod +x scripts/turtlebot_navigator.py
#Code
import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion

class TurtleBotNavigator:
    def __init__(self):
        rospy.init_node('turtlebot_navigator', anonymous=True)
        self.cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.odom_sub = rospy.Subscriber('/odom', Odometry, self.odom_callback)
        self.current_position = (0, 0)
        self.target_position = (3, 3)  # Set target position
        self.rate = rospy.Rate(10)

    def odom_callback(self, data):
        position = data.pose.pose.position
        self.current_position = (position.x, position.y)

    def move_to_target(self):
        move_cmd = Twist()
        while not rospy.is_shutdown():
            distance = ((self.target_position[0] - self.current_position[0])**2 +
                        (self.target_position[1] - self.current_position[1])**2)**0.5
            if distance < 0.1:
                rospy.loginfo("Reached target position")
                move_cmd.linear.x = 0
                move_cmd.angular.z = 0
                self.cmd_vel_pub.publish(move_cmd)
                break

            # Simple proportional controller
            move_cmd.linear.x = 0.5
            move_cmd.angular.z = 0
            self.cmd_vel_pub.publish(move_cmd)
            self.rate.sleep()

if __name__ == '__main__':
    try:
        navigator = TurtleBotNavigator()
        navigator.move_to_target()
    except rospy.ROSInterruptException:
        pass

